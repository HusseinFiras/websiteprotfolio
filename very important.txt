import React, { useState, useRef, useEffect } from 'react';
import { Send, Mail, User, MessageSquare } from 'lucide-react';
import { motion } from "framer-motion";
import { SectionWrapper } from "../hoc";
import { styles } from "../styles";
import ReCAPTCHA from "react-google-recaptcha";

const InputField = ({ icon: Icon, label, ...props }) => {
  const [isFocused, setIsFocused] = useState(false);
  
  return (
    <div className="relative">
      <label className="text-[#1af0dc] font-medium mb-2 block">
        {label}
      </label>
      <div className="relative">
        <div className={`absolute left-4 top-1/2 -translate-y-1/2 transition-colors duration-300
          ${isFocused ? 'text-[#1af0dc]' : 'text-gray-400'}`}>
          <Icon size={20} />
        </div>
        {props.type !== 'textarea' ? (
          <input
            {...props}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className={`w-full bg-[#0a192f] pl-12 pr-4 py-4 rounded-lg
              border transition-all duration-300
              ${isFocused ? 'border-[#1af0dc] shadow-[0_0_10px_rgba(26,240,220,0.3)]' : 'border-gray-700'}
              focus:outline-none text-white`}
          />
        ) : (
          <textarea
            {...props}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className={`w-full bg-[#0a192f] pl-12 pr-4 py-4 rounded-lg
              border transition-all duration-300 min-h-[200px]
              ${isFocused ? 'border-[#1af0dc] shadow-[0_0_10px_rgba(26,240,220,0.3)]' : 'border-gray-700'}
              focus:outline-none text-white resize-none`}
          />
        )}
      </div>
    </div>
  );
};

const Contact = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);
  const [submissionCount, setSubmissionCount] = useState(0);
  const [lastSubmissionTime, setLastSubmissionTime] = useState(0);
  const recaptchaRef = useRef(null);
  const formRef = useRef(null);

  // Load submission count from localStorage
  useEffect(() => {
    const storedCount = localStorage.getItem('submissionCount');
    const storedTime = localStorage.getItem('lastSubmissionTime');
    if (storedCount) setSubmissionCount(parseInt(storedCount));
    if (storedTime) setLastSubmissionTime(parseInt(storedTime));
  }, []);

  const validateEmail = (email) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  const rateLimitCheck = () => {
    const now = Date.now();
    const timeSinceLastSubmission = now - lastSubmissionTime;
    const hourInMs = 3600000;

    if (submissionCount >= 5 && timeSinceLastSubmission < hourInMs) {
      const waitTimeMinutes = Math.ceil((hourInMs - timeSinceLastSubmission) / 60000);
      throw new Error(`Too many submissions. Please wait ${waitTimeMinutes} minutes.`);
    }

    if (timeSinceLastSubmission >= hourInMs) {
      setSubmissionCount(0);
      localStorage.setItem('submissionCount', '0');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess(false);
    
    try {
      // Rate limiting check
      rateLimitCheck();

      // Basic validation
      const formData = new FormData(e.target);
      const email = formData.get('email');
      const message = formData.get('message');
      const name = formData.get('name');

      if (!name || name.length < 2) throw new Error("Please enter a valid name");
      if (!validateEmail(email)) throw new Error("Please enter a valid email address");
      if (!message || message.length < 10) throw new Error("Message must be at least 10 characters");

      // Get reCAPTCHA token
      const token = await recaptchaRef.current.executeAsync();
      if (!token) throw new Error("CAPTCHA verification failed");

      setLoading(true);

      // Add the token to form data
      formData.append('g-recaptcha-response', token);

      // Submit the form
      const response = await fetch('https://getform.io/f/bkkkowmb', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) throw new Error("Failed to send message");

      // Update submission count and time
      const newCount = submissionCount + 1;
      setSubmissionCount(newCount);
      setLastSubmissionTime(Date.now());
      localStorage.setItem('submissionCount', newCount.toString());
      localStorage.setItem('lastSubmissionTime', Date.now().toString());

      setSuccess(true);
      formRef.current.reset();
      recaptchaRef.current.reset();

    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen relative">
      <div className="absolute inset-0 bg-gradient-to-b from-transparent via-[#0a192f]/50 to-transparent -z-10" />

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 pt-16">
        <motion.div
          initial="hidden"
          animate="show"
          variants={{
            hidden: { opacity: 0, y: 100 },
            show: {
              opacity: 1,
              y: 0,
              transition: { type: "tween", duration: 1, delay: 0.2 },
            },
          }}
        >
          <h2 className={`${styles.sectionText} text-center mb-16`}>
            Contact
          </h2>

          <motion.div
            className="bg-[#0a192f]/50 backdrop-blur-sm rounded-2xl p-8 sm:p-12
              border border-[#1af0dc]/20 shadow-[0_0_30px_rgba(26,240,220,0.1)]"
          >
            <form
              ref={formRef}
              onSubmit={handleSubmit}
              className="space-y-8"
            >
              <InputField
                icon={User}
                label="Full Name"
                type="text"
                name="name"
                placeholder="Enter your full name"
                minLength={2}
                required
              />
              
              <InputField
                icon={Mail}
                label="Email Address"
                type="email"
                name="email"
                placeholder="Enter your email address"
                required
              />
              
              <InputField
                icon={MessageSquare}
                label="Message"
                type="textarea"
                name="message"
                placeholder="Enter your message"
                minLength={10}
                required
              />

              <ReCAPTCHA
                ref={recaptchaRef}
                size="invisible"
                sitekey="YOUR_RECAPTCHA_SITE_KEY"  // Replace with your actual reCAPTCHA site key
              />

              {error && (
                <div className="text-red-500 text-sm">{error}</div>
              )}

              {success && (
                <div className="text-green-500 text-sm">Message sent successfully!</div>
              )}

              <div className="flex justify-end">
                <button
                  type="submit"
                  disabled={loading}
                  className="group relative px-8 py-3 bg-[#1af0dc]/10 rounded-lg
                    border border-[#1af0dc]/50 text-[#1af0dc] font-medium
                    hover:bg-[#1af0dc]/20 transition-all duration-300
                    shadow-[0_0_10px_rgba(26,240,220,0.2)]
                    hover:shadow-[0_0_15px_rgba(26,240,220,0.3)]
                    disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span className="flex items-center gap-2">
                    {loading ? "Sending..." : (
                      <>
                        Send Message
                        <Send size={18} className="transition-transform group-hover:translate-x-1" />
                      </>
                    )}
                  </span>
                </button>
              </div>
            </form>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

export default SectionWrapper(Contact, "contact");
